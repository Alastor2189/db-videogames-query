#JOIN#
#1- Selezionare i dati di tutti giocatori che hanno scritto almeno una recensione, mostrandoli una sola volta (996)#
select distinct players.* 
from db_videogames.players p 
join reviews r 
on reviews.player_id  = players.id 


#2- Sezionare tutti i videogame dei tornei tenuti nel 2016, mostrandoli una sola volta (226)#
select distinct  videogame_id, tournament_id 
from db_videogames.tournament_videogame tv 
	join tournaments t 
		on t.id = tv.tournament_id 
	join videogames v on v.id = tv.videogame_id 
	where t.year = 2016


#3- Mostrare le categorie di ogni videogioco (1718)#
select  categories.name, videogames.name 
from db_videogames.videogames
    join category_videogame
        on category_videogame.videogame_id = videogames.id 
    join  categories
        on category_videogame.category_id = categories.id

#4- Selezionare i dati di tutte le software house che hanno rilasciato almeno un gioco dopo il 2020, mostrandoli una sola volta (6)
select distinct  software_houses.*
from videogames
    join software_houses
        on videogames.software_house_id = software_houses.id
where year(videogames.release_date) > 2020

#5- Selezionare i premi ricevuti da ogni software house per i videogiochi che ha prodotto (55)#
select  awards.name, software_houses.name
from awards
join award_videogame
	on award_videogame.award_id = awards.id
join  videogames
	on videogames.id = award_videogame.videogame_id
join  software_houses
	on software_houses.id = videogames.software_house_id
	
	
#6- Selezionare categorie e classificazioni PEGI dei videogiochi che hanno ricevuto recensioni da 4 e 5 stelle, mostrandole una sola volta (3363)#
select distinct  categories.name, pegi_labels.name
from categories
join category_videogame
    on category_videogame.category_id = categories.id
join  videogames
    on videogames.id = category_videogame.videogame_id
join  reviews
    on reviews.videogame_id = videogames.id
join  pegi_label_videogame
    on pegi_label_videogame.videogame_id = videogames.id
join  pegi_labels
	on pegi_labels.id = pegi_label_videogame.pegi_label_id
where reviews.rating = 4 OR reviews.rating = 5

#7- Selezionare quali giochi erano presenti nei tornei nei quali hanno partecipato i giocatori il cui nome inizia per 'S' (474)
select distinct  videogames.id
from videogames
join tournament_videogame
    on tournament_videogame.videogame_id = videogames.id
join  tournaments
    on tournaments.id = tournament_videogame.tournament_id
join player_tournament
    on player_tournament.tournament_id = tournaments.id
join  players
    on players.id = player_tournament.player_id
where players.name like "S%" 

#8- Selezionare le città in cui è stato giocato il gioco dell'anno del 2018 (36)
select  tournaments.city
from tournaments
join tournament_videogame
    on tournament_videogame.tournament_id = tournaments.id
join  videogames
    on videogames.id = tournament_videogame.videogame_id
join  award_videogame
	on award_videogame.videogame_id = videogames.id
join  awards
	on awards.id = award_videogame.award_id
where  awards.name LIKE "gioco dell'anno"
	and award_videogame.year = 2018


#9- Selezionare i giocatori che hanno giocato al gioco più atteso del 2018 in un torneo del 2019 (3306)
from players
join player_tournament
    on player_tournament.player_id = players.id
join tournaments
    on tournaments.id = player_tournament.tournament_id
join tournament_videogame
    on tournament_videogame.tournament_id = tournaments.id
join videogames
    on videogames.id = tournament_videogame.videogame_id
join award_videogame
    on award_videogame.videogame_id = videogames.id
join awards
    on awards.id = award_videogame.award_id
where awards.name LIKE "gioco più atteso"
    and award_videogame.year = 2018
	and tournaments.year = 2019 
	
	#*********** BONUS ***********#

#10- Selezionare i dati della prima software house che ha rilasciato un gioco, assieme ai dati del gioco stesso (software house id : 5)
select  videogames.*, software_houses.*
from software_houses
join videogames
	on videogames.software_house_id = software_houses.id
where videogames.release_date = 
	(select min(videogames.release_date) from videogames)
	
#11- Selezionare i dati del videogame (id, name, release_date, totale recensioni) con più recensioni (videogame id : potrebbe uscire 449 o 398, sono entrambi a 20)
select videogames.* , count(reviews.id) as n_recensioni
from videogames 
  join reviews 
  	on reviews.videogame_id = videogames.id
		group by videogame_id 
		order by n_recensioni desc 
			limit 1

	
#12- Selezionare la software house che ha vinto più premi tra il 2015 e il 2016 (software house id : potrebbe uscire 3 o 1, sono entrambi a 3)
select software_houses.*, count(award_videogame.id ) as premi_vinti
from software_houses
	join videogames 
		on videogames.software_house_id = software_houses.id
	join award_videogame 
		on award_videogame.videogame_id = videogames.id
	where award_videogame.year between 2015 and 2016
		group by software_houses.id
		order by premi_vinti 
			desc limit 1
	
#13- Selezionare le categorie dei videogame i quali hanno una media recensioni inferiore a 1.5 (10)#
			
SELECT DISTINCT c.id AS category_id, c.name AS category_name
FROM videogames v
INNER JOIN reviews r ON v.id = r.videogame_id
INNER JOIN category_videogame cv ON v.id = cv.videogame_id
INNER JOIN categories c ON cv.category_id = c.id
GROUP BY v.id, c.id, c.name
HAVING AVG(r.rating) < 2 